main
  start
    call init_putchar
    call putint 2w
    call putchar '\n'

    i = copy 3w
    br loop

  loop
    is_prime = call is_odd_prime i
    br is_prime prime loop_end

  prime
    call putint i
    call putchar '\n'
    br loop_end

  loop_end
    i = add i 2w
    c = ne i 65536w
    br c loop finish

  finish
    ret
end


putint
  input n word

  start
    c = lt n 10w
    br c single_digit multi_digit

  single_digit
    t = lo n
    ch = add t '0'
    call putchar ch
    ret

  multi_digit
    rest last = call div_rem n 10w
    call putint rest
    call putint last
    ret
end


putchar
  input c byte

  start
    asm
      input a c
      input x 0b
      clobbers y p

      jsr 0xE456
    end
    ret
end


init_putchar
  start
    store 0x0341 0x0Bb
    store 0x0348 0w
    ret
end


is_odd_prime
  input n word
  output is_prime bool

  start
    half = lsr n
    i = copy 3w
    done = gt i half
    br done prime loop

  loop
    _ rem = call div_rem n i
    is_not_prime = eq rem 0w
    br is_not_prime not_prime maybe_prime

  not_prime
    is_prime = copy false
    ret

  maybe_prime
    i = add i 2w
    done = gt i half
    br done prime loop

  finish
    is_prime = copy true
    ret
end

div_rem
  input dividend word
  input divisor word
  output quotient word
  output remainder word

  start
    done = lt dividend divisor
    quotient = copy 0w
    remainder = copy dividend
    br done finish loop

  loop
    remainder = sub remainder divisor
    quotient = add quotient 1w
    done = lt remainder divisor
    br done finish loop

  finish
    ret
end
